Index: src/main/java/kr/jbnu/se/std/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Point;\r\nimport java.awt.Rectangle;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n/**\r\n * Actual game.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Game {\r\n    \r\n    /**\r\n     * We use this to generate a random number.\r\n     */\r\n    private Random random;\r\n    \r\n    /**\r\n     * Font that we will use to write statistic to the screen.\r\n     */\r\n    private Font font;\r\n    \r\n    /**\r\n     * Array list of the ducks.\r\n     */\r\n    private ArrayList<Duck> ducks;\r\n    \r\n    /**\r\n     * How many ducks leave the screen alive?\r\n     */\r\n    private int runawayDucks;\r\n    \r\n   /**\r\n     * How many ducks the player killed?\r\n     */\r\n    private int killedDucks;\r\n    \r\n    /**\r\n     * For each killed duck, the player gets points.\r\n     */\r\n    private int score;\r\n    \r\n   /**\r\n     * How many times a player is shot?\r\n     */\r\n    private int shoots;\r\n    \r\n    /**\r\n     * Last time of the shoot.\r\n     */\r\n    private long lastTimeShoot;    \r\n    /**\r\n     * The time which must elapse between shots.\r\n     */\r\n    private long timeBetweenShots;\r\n\r\n    /**\r\n     * kr.jbnu.se.std.Game background image.\r\n     */\r\n    private BufferedImage backgroundImg;\r\n    \r\n    /**\r\n     * Bottom grass.\r\n     */\r\n    private BufferedImage grassImg;\r\n    \r\n    /**\r\n     * kr.jbnu.se.std.Duck image.\r\n     */\r\n    private BufferedImage duckImg;\r\n    \r\n    /**\r\n     * Shotgun sight image.\r\n     */\r\n    private BufferedImage sightImg;\r\n    \r\n    /**\r\n     * Middle width of the sight image.\r\n     */\r\n    private int sightImgMiddleWidth;\r\n    /**\r\n     * Middle height of the sight image.\r\n     */\r\n    private int sightImgMiddleHeight;\r\n    \r\n\r\n    public Game()\r\n    {\r\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\r\n        \r\n        Thread threadForInitGame = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                // Sets variables and objects for the game.\r\n                Initialize();\r\n                // Load game files (images, sounds, ...)\r\n                LoadContent();\r\n                \r\n                Framework.gameState = Framework.GameState.PLAYING;\r\n            }\r\n        };\r\n        threadForInitGame.start();\r\n    }\r\n    \r\n    \r\n   /**\r\n     * Set variables and objects for the game.\r\n     */\r\n    private void Initialize()\r\n    {\r\n        random = new Random();        \r\n        font = new Font(\"monospaced\", Font.BOLD, 18);\r\n        \r\n        ducks = new ArrayList<Duck>();\r\n        \r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        shoots = 0;\r\n        \r\n        lastTimeShoot = 0;\r\n        timeBetweenShots = Framework.secInNanosec / 3;\r\n    }\r\n    \r\n    /**\r\n     * Load game files - images, sounds, ...\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL backgroundImgUrl = this.getClass().getResource(\"/images/background.jpg\");\r\n            backgroundImg = ImageIO.read(backgroundImgUrl);\r\n            \r\n            URL grassImgUrl = this.getClass().getResource(\"/images/grass.png\");\r\n            grassImg = ImageIO.read(grassImgUrl);\r\n            \r\n            URL duckImgUrl = this.getClass().getResource(\"/images/duck.png\");\r\n            duckImg = ImageIO.read(duckImgUrl);\r\n            \r\n            URL sightImgUrl = this.getClass().getResource(\"/images/sight.png\");\r\n            sightImg = ImageIO.read(sightImgUrl);\r\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\r\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Restart game - reset some variables.\r\n     */\r\n    public void RestartGame()\r\n    {\r\n        // Removes all of the ducks from this list.\r\n        ducks.clear();\r\n        \r\n        // We set last duckt time to zero.\r\n        Duck.lastDuckTime = 0;\r\n        \r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        shoots = 0;\r\n        \r\n        lastTimeShoot = 0;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update game logic.\r\n     * \r\n     * @param gameTime gameTime of the game.\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void UpdateGame(long gameTime, Point mousePosition)\r\n    {\r\n        // Creates a new duck, if it's the time, and add it to the array list.\r\n        if(System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks)\r\n        {\r\n            // Here we create new duck and add it to the array list.\r\n            ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));\r\n            \r\n            // Here we increase nextDuckLines so that next duck will be created in next line.\r\n            Duck.nextDuckLines++;\r\n            if(Duck.nextDuckLines >= Duck.duckLines.length)\r\n                Duck.nextDuckLines = 0;\r\n            \r\n            Duck.lastDuckTime = System.nanoTime();\r\n        }\r\n        \r\n        // Update all of the ducks.\r\n        for(int i = 0; i < ducks.size(); i++)\r\n        {\r\n            // Move the duck.\r\n            ducks.get(i).Update();\r\n            \r\n            // Checks if the duck leaves the screen and remove it if it does.\r\n            if(ducks.get(i).x < 0 - duckImg.getWidth())\r\n            {\r\n                ducks.remove(i);\r\n                runawayDucks++;\r\n            }\r\n        }\r\n        \r\n        // Does player shoots?\r\n        if(Canvas.mouseButtonState(MouseEvent.BUTTON1))\r\n        {\r\n            // Checks if it can shoot again.\r\n            if(System.nanoTime() - lastTimeShoot >= timeBetweenShots)\r\n            {\r\n                shoots++;\r\n                \r\n                // We go over all the ducks and we look if any of them was shoot.\r\n                for(int i = 0; i < ducks.size(); i++)\r\n                {\r\n                    // We check, if the mouse was over ducks head or body, when player has shot.\r\n                    if(new Rectangle(ducks.get(i).x + 18, ducks.get(i).y     , 27, 30).contains(mousePosition) ||\r\n                       new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition))\r\n                    {\r\n                        killedDucks++;\r\n                        score += ducks.get(i).score;\r\n                        \r\n                        // Remove the duck from the array list.\r\n                        ducks.remove(i);\r\n                        \r\n                        // We found the duck that player shoot so we can leave the for loop.\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                lastTimeShoot = System.nanoTime();\r\n            }\r\n        }\r\n        \r\n        // When 200 ducks runaway, the game ends.\r\n        if(runawayDucks >= 200)\r\n            Framework.gameState = Framework.GameState.GAMEOVER;\r\n    }\r\n    \r\n    /**\r\n     * Draw the game to the screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void Draw(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        \r\n        // Here we draw all the ducks.\r\n        for(int i = 0; i < ducks.size(); i++)\r\n        {\r\n            ducks.get(i).Draw(g2d);\r\n        }\r\n        \r\n        g2d.drawImage(grassImg, 0, Framework.frameHeight - grassImg.getHeight(), Framework.frameWidth, grassImg.getHeight(), null);\r\n        \r\n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\r\n        \r\n        g2d.setFont(font);\r\n        g2d.setColor(Color.darkGray);\r\n        \r\n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\r\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\r\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\r\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the game over screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition Current mouse position.\r\n     */\r\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        Draw(g2d, mousePosition);\r\n        \r\n        // The first text is used for shade.\r\n        g2d.setColor(Color.black);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 39, (int)(Framework.frameHeight * 0.65) + 1);\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 149, (int)(Framework.frameHeight * 0.70) + 1);\r\n        g2d.setColor(Color.red);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 40, (int)(Framework.frameHeight * 0.65));\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 150, (int)(Framework.frameHeight * 0.70));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Game.java b/src/main/java/kr/jbnu/se/std/Game.java
--- a/src/main/java/kr/jbnu/se/std/Game.java	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ b/src/main/java/kr/jbnu/se/std/Game.java	(date 1728361938410)
@@ -11,6 +11,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Random;
+import java.util.Timer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
@@ -251,6 +252,11 @@
         // When 200 ducks runaway, the game ends.
         if(runawayDucks >= 200)
             Framework.gameState = Framework.GameState.GAMEOVER;
+//
+//        if(killedDucks != 0 && killedDucks % 10 == 0) {
+//            Duck.timeBetweenDucks -= 1000000000*60;
+//
+//        }
     }
     
     /**
Index: src/main/java/kr/jbnu/se/std/LoginUI.java
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/LoginUI.java b/src/main/java/kr/jbnu/se/std/LoginUI.java
deleted file mode 100644
--- a/src/main/java/kr/jbnu/se/std/LoginUI.java	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ /dev/null	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
@@ -1,70 +0,0 @@
-package kr.jbnu.se.std;
-
-import javax.swing.*;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.IOException;
-
-public class LoginUI extends JFrame {
-    private JTextField emailField;
-    private JPasswordField passwordField;
-    private JButton loginButton;
-    private JButton registerButton;
-
-    public LoginUI() {
-        setTitle("Firebase 로그인");
-        setSize(400, 300);
-        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        setLocationRelativeTo(null);
-
-        // UI 구성
-        JPanel panel = new JPanel();
-        panel.setLayout(new GridLayout(3, 2));
-
-        panel.add(new JLabel("이메일:"));
-        emailField = new JTextField();
-        panel.add(emailField);
-
-        panel.add(new JLabel("비밀번호:"));
-        passwordField = new JPasswordField();
-        panel.add(passwordField);
-
-        loginButton = new JButton("로그인");
-        registerButton = new JButton("회원가입");
-        panel.add(loginButton);
-        panel.add(registerButton);
-
-        add(panel);
-
-        // 버튼 클릭 이벤트 처리
-        loginButton.addActionListener(new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                String email = emailField.getText();
-                String password = new String(passwordField.getPassword());
-                FirebaseAuthService.login(email, password);
-            }
-        });
-
-        registerButton.addActionListener(new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                String email = emailField.getText();
-                String password = new String(passwordField.getPassword());
-                FirebaseAuthService.register(email, password);
-            }
-        });
-    }
-
-    public static void main(String[] args) {
-        SwingUtilities.invokeLater(() -> {
-            try {
-                FirebaseInitializer.initialize(); // Firebase 초기화
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            new LoginUI().setVisible(true);   // 로그인 UI 표시
-        });
-    }
-}
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ /dev/null	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/shoottheDuck.iml" filepath="$PROJECT_DIR$/.idea/shoottheDuck.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/kr/jbnu/se/std/FirebaseAuthService.java
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/FirebaseAuthService.java b/src/main/java/kr/jbnu/se/std/FirebaseAuthService.java
deleted file mode 100644
--- a/src/main/java/kr/jbnu/se/std/FirebaseAuthService.java	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ /dev/null	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
@@ -1,36 +0,0 @@
-package kr.jbnu.se.std;
-
-import com.google.firebase.auth.FirebaseAuth;
-import com.google.firebase.auth.FirebaseAuthException;
-import com.google.firebase.auth.UserRecord;
-
-import javax.swing.JOptionPane;
-
-public class FirebaseAuthService {
-
-    public static void register(String email, String password) {
-        try {
-            UserRecord.CreateRequest request = new UserRecord.CreateRequest()
-                    .setEmail(email)
-                    .setPassword(password);
-
-            UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);
-            System.out.println("Successfully created new user: " + userRecord.getUid());
-            JOptionPane.showMessageDialog(null, "회원가입 성공!");
-        } catch (FirebaseAuthException e) {
-            System.err.println("Error creating user: " + e.getMessage());
-            JOptionPane.showMessageDialog(null, "회원가입 실패: " + e.getMessage());
-        }
-    }
-
-    public static void login(String email, String password) {
-        try {
-            FirebaseAuth auth = FirebaseAuth.getInstance();
-            System.out.println("로그인 시도: " + email);
-            JOptionPane.showMessageDialog(null, "로그인 성공!");
-        } catch (Exception e) {
-            System.err.println("Login failed: " + e.getMessage());
-            JOptionPane.showMessageDialog(null, "로그인 실패: " + e.getMessage());
-        }
-    }
-}
Index: src/main/java/kr/jbnu/se/std/FirebaseInitializer.java
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/FirebaseInitializer.java b/src/main/java/kr/jbnu/se/std/FirebaseInitializer.java
deleted file mode 100644
--- a/src/main/java/kr/jbnu/se/std/FirebaseInitializer.java	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ /dev/null	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
@@ -1,22 +0,0 @@
-package kr.jbnu.se.std;
-// 파이어베이스 서비스 초기화 class
-
-import com.google.firebase.FirebaseApp;
-import com.google.firebase.FirebaseOptions;
-import com.google.auth.oauth2.GoogleCredentials;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-public class FirebaseInitializer {
-    public static void initialize() throws IOException {
-        FileInputStream serviceAccount = new FileInputStream("AIzaSyDD_0b35254zoe03RBNYEDODZocbpIklu4");
-
-        FirebaseOptions options = new FirebaseOptions.Builder()
-                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
-                .setDatabaseUrl("https://your-database-url.firebaseio.com")
-                .build();
-
-        FirebaseApp.initializeApp(options);
-    }
-}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Default ignored files\r\n/shelf/\r\n/workspace.xml\r\n# Editor-based HTTP Client requests\r\n/httpRequests/\r\n# Datasource local storage ignored files\r\n/dataSources/\r\n/dataSources.local.xml\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
--- a/.idea/.gitignore	(revision 6d916fceec8ed07b9186738db16d75a3c61413ea)
+++ b/.idea/.gitignore	(date 1728313634000)
@@ -1,8 +1,117 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
+# Created by https://www.toptal.com/developers/gitignore/api/intellij
+# Edit at https://www.toptal.com/developers/gitignore?templates=intellij
+
+### Intellij ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# AWS User-specific
+.idea/**/aws.xml
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/artifacts
+# .idea/compiler.xml
+# .idea/jarRepositories.xml
+# .idea/modules.xml
+# .idea/*.iml
+# .idea/modules
+# *.iml
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# SonarLint plugin
+.idea/sonarlint/
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
+
+### Intellij Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+# https://plugins.jetbrains.com/plugin/7973-sonarlint
+.idea/**/sonarlint/
+
+# SonarQube Plugin
+# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin
+.idea/**/sonarIssues.xml
+
+# Markdown Navigator plugin
+# https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced
+.idea/**/markdown-navigator.xml
+.idea/**/markdown-navigator-enh.xml
+.idea/**/markdown-navigator/
+
+# Cache file creation bug
+# See https://youtrack.jetbrains.com/issue/JBR-2257
+.idea/$CACHE_FILE$
+
+# CodeStream plugin
+# https://plugins.jetbrains.com/plugin/12206-codestream
+.idea/codestream.xml
+
+# Azure Toolkit for IntelliJ plugin
+# https://plugins.jetbrains.com/plugin/8053-azure-toolkit-for-intellij
+.idea/**/azureSettings.xml
+
+# End of https://www.toptal.com/developers/gitignore/api/intellij
\ No newline at end of file
