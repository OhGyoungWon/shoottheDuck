Index: pom.xml
===================================================================
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
--- a/pom.xml	(revision 0150a24d8d9b0534630811b4d3397c6e27ccb7d9)
+++ /dev/null	(revision 0150a24d8d9b0534630811b4d3397c6e27ccb7d9)
@@ -1,48 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <groupId>kr.jbnu.se.std</groupId>
-    <artifactId>shoottheduck</artifactId>
-    <version>1.0-SNAPSHOT</version>
-
-    <repositories>
-        <repository>
-            <id>central</id>
-            <url>https://repo.maven.apache.org/maven2/</url>
-        </repository>
-    </repositories>
-
-    <dependencies>
-        <!-- Firebase Admin SDK -->
-        <dependency>
-            <groupId>com.google.firebase</groupId>
-            <artifactId>firebase-admin</artifactId>
-            <version>9.3.0</version>
-        </dependency>
-
-        <!-- Firebase Authentication SDK -->
-        <dependency>
-            <groupId>com.google.firebase</groupId>
-            <artifactId>firebase-auth</artifactId>
-            <version>21.0.1</version>
-        </dependency>
-
-        <!-- Gson for JSON Parsing -->
-        <dependency>
-            <groupId>com.google.code.gson</groupId>
-            <artifactId>gson</artifactId>
-            <version>2.8.6</version>
-        </dependency>
-    </dependencies>
-
-
-    <properties>
-        <maven.compiler.source>8</maven.compiler.source>
-        <maven.compiler.target>8</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-</project>
\ No newline at end of file
Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Point;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n/**\r\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Framework extends Canvas {\r\n    \r\n    /**\r\n     * Width of the frame.\r\n     */\r\n    public static int frameWidth;\r\n    /**\r\n     * Height of the frame.\r\n     */\r\n    public static int frameHeight;\r\n\r\n    /**\r\n     * Time of one second in nanoseconds.\r\n     * 1 second = 1 000 000 000 nanoseconds\r\n     */\r\n    public static final long secInNanosec = 1000000000L;\r\n    \r\n    /**\r\n     * Time of one millisecond in nanoseconds.\r\n     * 1 millisecond = 1 000 000 nanoseconds\r\n     */\r\n    public static final long milisecInNanosec = 1000000L;\r\n    \r\n    /**\r\n     * FPS - Frames per second\r\n     * How many times per second the game should update?\r\n     */\r\n    private final int GAME_FPS = 60;\r\n    /**\r\n     * Pause between updates. It is in nanoseconds.\r\n     */\r\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\r\n    \r\n    /**\r\n     * Possible states of the game\r\n     */\r\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING, MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, DESTROYED}\r\n    /**\r\n     * Current state of the game\r\n     */\r\n    public static GameState gameState;\r\n    \r\n    /**\r\n     * Elapsed game time in nanoseconds.\r\n     */\r\n    private long gameTime;\r\n    // It is used for calculating elapsed time.\r\n    private long lastTime;\r\n    \r\n    // The actual game\r\n    private Game game;\r\n    \r\n    \r\n    /**\r\n     * Image for menu.\r\n     */\r\n    private BufferedImage shootTheDuckMenuImg;    \r\n    \r\n    \r\n    public Framework ()\r\n    {\r\n        super();\r\n        \r\n        gameState = GameState.VISUALIZING;\r\n        \r\n        //We start game in new thread.\r\n        Thread gameThread = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                GameLoop();\r\n            }\r\n        };\r\n        gameThread.start();\r\n    }\r\n    \r\n    \r\n   /**\r\n     * Set variables and objects.\r\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void Initialize()\r\n    {\r\n\r\n    }\r\n    \r\n    /**\r\n     * Load files - images, sounds, ...\r\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\r\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\r\n     */\r\n    private void GameLoop()\r\n    {\r\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\r\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\r\n        \r\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n        long beginTime, timeTaken, timeLeft;\r\n        \r\n        while(true)\r\n        {\r\n            beginTime = System.nanoTime();\r\n            \r\n            switch (gameState)\r\n            {\r\n                case PLAYING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    \r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    \r\n                    lastTime = System.nanoTime();\r\n                break;\r\n                case GAMEOVER:\r\n                    //...\r\n                break;\r\n                case MAIN_MENU:\r\n                    //...\r\n                break;\r\n                case OPTIONS:\r\n                    //...\r\n                break;\r\n                case GAME_CONTENT_LOADING:\r\n                    //...\r\n                break;\r\n                case STARTING:\r\n                    // Sets variables and objects.\r\n                    Initialize();\r\n                    // Load files - images, sounds, ...\r\n                    LoadContent();\r\n\r\n                    // When all things that are called above finished, we change game status to main menu.\r\n                    gameState = GameState.MAIN_MENU;\r\n                break;\r\n                case VISUALIZING:\r\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px). \r\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\r\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\r\n                    // so that we although get approximately size.\r\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\r\n                    {\r\n                        frameWidth = this.getWidth();\r\n                        frameHeight = this.getHeight();\r\n\r\n                        // When we get size of frame we change status.\r\n                        gameState = GameState.STARTING;\r\n                    }\r\n                    else\r\n                    {\r\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\r\n                        lastVisualizingTime = System.nanoTime();\r\n                    }\r\n                break;\r\n            }\r\n            \r\n            // Repaint the screen.\r\n            repaint();\r\n            \r\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n            timeTaken = System.nanoTime() - beginTime;\r\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\r\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\r\n            if (timeLeft < 10) \r\n                timeLeft = 10; //set a minimum\r\n            try {\r\n                 //Provides the necessary delay and also yields control so that other thread can do work.\r\n                 Thread.sleep(timeLeft);\r\n            } catch (InterruptedException ex) { }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Draw the game to the screen. It is called through repaint() method in GameLoop() method.\r\n     */\r\n    @Override\r\n    public void Draw(Graphics2D g2d)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case PLAYING:\r\n                game.Draw(g2d, mousePosition());\r\n            break;\r\n            case GAMEOVER:\r\n                game.DrawGameOver(g2d, mousePosition());\r\n            break;\r\n            case MAIN_MENU:\r\n                g2d.drawImage(shootTheDuckMenuImg, 0, 0, frameWidth, frameHeight, null);\r\n                g2d.drawString(\"Use left mouse button to shot the duck.\", frameWidth / 2 - 83, (int)(frameHeight * 0.65));   \r\n                g2d.drawString(\"Click with left mouse button to start the game.\", frameWidth / 2 - 100, (int)(frameHeight * 0.67));                \r\n                g2d.drawString(\"Press ESC any time to exit the game.\", frameWidth / 2 - 75, (int)(frameHeight * 0.70));\r\n                g2d.setColor(Color.white);\r\n                g2d.drawString(\"WWW.GAMETUTORIAL.NET\", 7, frameHeight - 5);\r\n            break;\r\n            case OPTIONS:\r\n                //...\r\n            break;\r\n            case GAME_CONTENT_LOADING:\r\n                g2d.setColor(Color.white);\r\n                g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\r\n            break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Starts new game.\r\n     */\r\n    private void newGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        \r\n        game = new Game();\r\n    }\r\n    \r\n    /**\r\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\r\n     */\r\n    private void restartGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        \r\n        game.RestartGame();\r\n        \r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n    \r\n    /**\r\n     * Returns the position of the mouse pointer in game frame/window.\r\n     * If mouse position is null than this method return 0,0 coordinate.\r\n     * \r\n     * @return Point of mouse coordinates.\r\n     */\r\n    private Point mousePosition()\r\n    {\r\n        try\r\n        {\r\n            Point mp = this.getMousePosition();\r\n            \r\n            if(mp != null)\r\n                return this.getMousePosition();\r\n            else\r\n                return new Point(0, 0);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return new Point(0, 0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method is called when keyboard key is released.\r\n     * \r\n     * @param e KeyEvent\r\n     */\r\n    @Override\r\n    public void keyReleasedFramework(KeyEvent e)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case GAMEOVER:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\r\n                    System.exit(0);\r\n                else if(e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER)\r\n                    restartGame();\r\n            break;\r\n            case PLAYING:\r\n            case MAIN_MENU:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\r\n                    System.exit(0);\r\n            break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method is called when mouse button is clicked.\r\n     * \r\n     * @param e MouseEvent\r\n     */\r\n    @Override\r\n    public void mouseClicked(MouseEvent e)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case MAIN_MENU:\r\n                if(e.getButton() == MouseEvent.BUTTON1)\r\n                    newGame();\r\n            break;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision 0150a24d8d9b0534630811b4d3397c6e27ccb7d9)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1729075785807)
@@ -8,18 +8,29 @@
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
 
+
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
+
 /**
  * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.
- * 
+ *
  * @author www.gametutorial.net
  */
 
 public class Framework extends Canvas {
-    
+
     /**
      * Width of the frame.
      */
@@ -34,13 +45,13 @@
      * 1 second = 1 000 000 000 nanoseconds
      */
     public static final long secInNanosec = 1000000000L;
-    
+
     /**
      * Time of one millisecond in nanoseconds.
      * 1 millisecond = 1 000 000 nanoseconds
      */
     public static final long milisecInNanosec = 1000000L;
-    
+
     /**
      * FPS - Frames per second
      * How many times per second the game should update?
@@ -50,7 +61,7 @@
      * Pause between updates. It is in nanoseconds.
      */
     private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;
-    
+
     /**
      * Possible states of the game
      */
@@ -59,30 +70,31 @@
      * Current state of the game
      */
     public static GameState gameState;
-    
+
     /**
      * Elapsed game time in nanoseconds.
      */
     private long gameTime;
     // It is used for calculating elapsed time.
     private long lastTime;
-    
+
     // The actual game
     private Game game;
-    
-    
+
     /**
      * Image for menu.
      */
-    private BufferedImage shootTheDuckMenuImg;    
-    
-    
+    private BufferedImage shootTheDuckMenuImg;
+
+    // 사용자 스코어 데이터 저장용 리스트
+    private List<UserScore> userScores = new ArrayList<>();
+
     public Framework ()
     {
         super();
-        
+
         gameState = GameState.VISUALIZING;
-        
+
         //We start game in new thread.
         Thread gameThread = new Thread() {
             @Override
@@ -92,17 +104,17 @@
         };
         gameThread.start();
     }
-    
-    
-   /**
+
+    /**
      * Set variables and objects.
      * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.
      */
     private void Initialize()
     {
-
+        // Firebase에서 사용자 스코어 데이터를 가져옴
+        loadUserScores();
     }
-    
+
     /**
      * Load files - images, sounds, ...
      * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.
@@ -118,7 +130,7 @@
             Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
-    
+
     /**
      * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.
      */
@@ -126,35 +138,35 @@
     {
         // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.
         long visualizingTime = 0, lastVisualizingTime = System.nanoTime();
-        
+
         // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.
         long beginTime, timeTaken, timeLeft;
-        
+
         while(true)
         {
             beginTime = System.nanoTime();
-            
+
             switch (gameState)
             {
                 case PLAYING:
                     gameTime += System.nanoTime() - lastTime;
-                    
+
                     game.UpdateGame(gameTime, mousePosition());
-                    
+
                     lastTime = System.nanoTime();
-                break;
+                    break;
                 case GAMEOVER:
                     //...
-                break;
+                    break;
                 case MAIN_MENU:
                     //...
-                break;
+                    break;
                 case OPTIONS:
                     //...
-                break;
+                    break;
                 case GAME_CONTENT_LOADING:
                     //...
-                break;
+                    break;
                 case STARTING:
                     // Sets variables and objects.
                     Initialize();
@@ -163,9 +175,9 @@
 
                     // When all things that are called above finished, we change game status to main menu.
                     gameState = GameState.MAIN_MENU;
-                break;
+                    break;
                 case VISUALIZING:
-                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px). 
+                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).
                     // So we wait one second for the window/frame to be set to its correct size. Just in case we
                     // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,
                     // so that we although get approximately size.
@@ -182,25 +194,26 @@
                         visualizingTime += System.nanoTime() - lastVisualizingTime;
                         lastVisualizingTime = System.nanoTime();
                     }
-                break;
+                    break;
             }
-            
+
             // Repaint the screen.
             repaint();
-            
+
             // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.
+            //
             timeTaken = System.nanoTime() - beginTime;
             timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds
             // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.
-            if (timeLeft < 10) 
+            if (timeLeft < 10)
                 timeLeft = 10; //set a minimum
             try {
-                 //Provides the necessary delay and also yields control so that other thread can do work.
-                 Thread.sleep(timeLeft);
+                //Provides the necessary delay and also yields control so that other thread can do work.
+                Thread.sleep(timeLeft);
             } catch (InterruptedException ex) { }
         }
     }
-    
+
     /**
      * Draw the game to the screen. It is called through repaint() method in GameLoop() method.
      */
@@ -211,28 +224,76 @@
         {
             case PLAYING:
                 game.Draw(g2d, mousePosition());
-            break;
+                break;
             case GAMEOVER:
                 game.DrawGameOver(g2d, mousePosition());
-            break;
+                drawScoreRanking(g2d);
+                break;
             case MAIN_MENU:
                 g2d.drawImage(shootTheDuckMenuImg, 0, 0, frameWidth, frameHeight, null);
-                g2d.drawString("Use left mouse button to shot the duck.", frameWidth / 2 - 83, (int)(frameHeight * 0.65));   
-                g2d.drawString("Click with left mouse button to start the game.", frameWidth / 2 - 100, (int)(frameHeight * 0.67));                
+                g2d.drawString("Use left mouse button to shot the duck.", frameWidth / 2 - 83, (int)(frameHeight * 0.65));
+                g2d.drawString("Click with left mouse button to start the game.", frameWidth / 2 - 100, (int)(frameHeight * 0.67));
                 g2d.drawString("Press ESC any time to exit the game.", frameWidth / 2 - 75, (int)(frameHeight * 0.70));
                 g2d.setColor(Color.white);
                 g2d.drawString("WWW.GAMETUTORIAL.NET", 7, frameHeight - 5);
-            break;
+                drawScoreRanking(g2d);
+                break;
             case OPTIONS:
                 //...
-            break;
+                break;
             case GAME_CONTENT_LOADING:
                 g2d.setColor(Color.white);
                 g2d.drawString("GAME is LOADING", frameWidth / 2 - 50, frameHeight / 2);
-            break;
+                break;
         }
     }
-    
+
+    /**
+     * 사용자 스코어 순위를 GUI로 그리는 메서드
+     */
+    private void drawScoreRanking(Graphics2D g2d) {
+        g2d.setColor(Color.white);
+        g2d.drawString("User Score Ranking:", frameWidth / 2 - 50, 50);
+
+        int yPosition = 70;
+        for (int i = 0; i < userScores.size(); i++) {
+            UserScore userScore = userScores.get(i);
+            g2d.drawString((i + 1) + ". " + userScore.getEmail() + " - Score: " + userScore.getScore(), frameWidth / 2 - 50, yPosition);
+            yPosition += 20;
+        }
+    }
+
+    /**
+     * Firebase에서 사용자 스코어 데이터를 가져오는 메서드
+     */
+    private void loadUserScores() {
+        DatabaseReference databaseRef = FirebaseDatabase.getInstance().getReference("users");
+
+        databaseRef.addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(DataSnapshot dataSnapshot) {
+                userScores.clear();
+
+                for (DataSnapshot userSnapshot : dataSnapshot.getChildren()) {
+                    String email = userSnapshot.getKey().replace(",", ".");
+                    Integer score = userSnapshot.child("score").getValue(Integer.class);
+
+                    if (score != null) {
+                        userScores.add(new UserScore(email, new Game().getScore()));
+                    }
+                }
+
+                // 스코어 순으로 정렬
+                Collections.sort(userScores, Comparator.comparingInt(UserScore::getScore).reversed());
+            }
+
+            @Override
+            public void onCancelled(DatabaseError databaseError) {
+                Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, "Database error: " + databaseError.getMessage());
+            }
+        });
+    }
+
     /**
      * Starts new game.
      */
@@ -241,10 +302,10 @@
         // We set gameTime to zero and lastTime to current time for later calculations.
         gameTime = 0;
         lastTime = System.nanoTime();
-        
+
         game = new Game();
     }
-    
+
     /**
      *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.
      */
@@ -253,17 +314,17 @@
         // We set gameTime to zero and lastTime to current time for later calculations.
         gameTime = 0;
         lastTime = System.nanoTime();
-        
+
         game.RestartGame();
-        
+
         // We change game status so that the game can start.
         gameState = GameState.PLAYING;
     }
-    
+
     /**
      * Returns the position of the mouse pointer in game frame/window.
      * If mouse position is null than this method return 0,0 coordinate.
-     * 
+     *
      * @return Point of mouse coordinates.
      */
     private Point mousePosition()
@@ -271,7 +332,7 @@
         try
         {
             Point mp = this.getMousePosition();
-            
+
             if(mp != null)
                 return this.getMousePosition();
             else
@@ -282,10 +343,10 @@
             return new Point(0, 0);
         }
     }
-    
+
     /**
      * This method is called when keyboard key is released.
-     * 
+     *
      * @param e KeyEvent
      */
     @Override
@@ -298,18 +359,18 @@
                     System.exit(0);
                 else if(e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER)
                     restartGame();
-            break;
+                break;
             case PLAYING:
             case MAIN_MENU:
                 if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
                     System.exit(0);
-            break;
+                break;
         }
     }
-    
+
     /**
      * This method is called when mouse button is clicked.
-     * 
+     *
      * @param e MouseEvent
      */
     @Override
@@ -320,7 +381,28 @@
             case MAIN_MENU:
                 if(e.getButton() == MouseEvent.BUTTON1)
                     newGame();
-            break;
+                break;
         }
     }
 }
+
+/**
+ * 사용자 스코어 클래스
+ */
+class UserScore {
+    private String email;
+    private int score;
+
+    public UserScore(String email, int score) {
+        this.email = email;
+        this.score = score;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public int getScore() {
+        return score;
+    }
+}
\ No newline at end of file
